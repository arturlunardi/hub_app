import pandas as pd
import streamlit as st
import json
import requests
from hubspot import HubSpot
from hubspot.crm.contacts import SimplePublicObjectInput
from hubspot.crm.deals import ApiException as DealException
from hubspot.crm.contacts import ApiException as ContactException
from hubspot.crm.properties import ApiException as PropertyException
import datetime


def check_password(secrets_key):
    """Returns `True` if the user had the correct password."""

    def password_entered():
        """Checks whether a password entered by the user is correct."""
        if st.session_state[secrets_key] == st.secrets[secrets_key]:
            st.session_state[f"password_correct_{secrets_key}"] = True
            del st.session_state[secrets_key]  # don't store password
        else:
            st.session_state[f"password_correct_{secrets_key}"] = False

    if f"password_correct_{secrets_key}" not in st.session_state:
        # First run, show input for password.
        st.text_input(
            "Password", type="password", on_change=password_entered, key=secrets_key
        )
        return False
    elif not st.session_state[f"password_correct_{secrets_key}"]:
        # Password not correct, show input + error.
        st.text_input(
            "Password", type="password", on_change=password_entered, key=secrets_key
        )
        st.error("Password incorreto 游땟")
        return False
    else:
        # Password correct.
        return True

 
@st.cache(hash_funcs={"_thread.RLock": lambda _: None, 'builtins.weakref': lambda _: None})
def get_df_usuarios():
    """
    Retorna df do vista com todos os usu치rios de loca칞칚o.
    """
    headers = {
    'accept': 'application/json'
    }
    for page in range(1, 100):
        url = f'http://brasaolt-rest.vistahost.com.br/usuarios/listar?key={st.secrets["vista_api_key"]}&pesquisa={{"fields":["Codigo", "Nomecompleto", "Nome", "E-mail", "Atua\\u00e7\\u00e3oemloca\\u00e7\\u00e3o", "Atua\\u00e7\\u00e3oemvenda",  "Corretor", "Gerente", "Agenciador", "Administrativo", "Observacoes", {{"Equipe": ["Nome"]}}], "filter": {{"Exibirnosite": ["Sim"], "Atua\\u00e7\\u00e3oemvenda": ["Sim"], "Corretor": ["Sim"], "Gerente": ["Nao"]}}, "paginacao":{{"pagina":{page}, "quantidade":50}}}}&Equipe={{"fields:["Nome"]}}'
        response = requests.get(url, headers=headers)
        if response.content == b'[]':
            break
        df_usuarios = pd.DataFrame(json.loads(response.content))[1:].T
    df_usuarios['Equipe'] = df_usuarios['Equipe'].apply(lambda x: [x[key] for key in x][0]['Nome'] if type(x) == dict else x)
    # df_usuarios_loc = df_usuarios.loc[(df_usuarios['Inativo'] == 'Nao')]
    df_usuarios.reset_index(inplace=True, drop=True)

    return df_usuarios.sort_values(by="Nomecompleto")


# @st.cache
def return_labels_hubspot_property(object_type, property_name):
    try:
        # para consultar as properties
        api_response = api_client.crm.properties.core_api.get_by_name(object_type=object_type, property_name=property_name, archived=False)
        api_response_dict = api_response.to_dict()
        return {"options": [option.get('label') for option in api_response_dict['options']], "label": api_response_dict['label']}
    except PropertyException as e:
        print("Exception when calling core_api->get_by_name: %s\n" % e)


def create_hubspot_note(message):
    url = "https://api.hubapi.com/crm/v3/objects/notes"

    querystring = {"hapikey":f"{st.secrets['api_key']}"}

    payload = {"properties":{"hs_timestamp": f"{datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%SZ')}", "hs_note_body": message}}

    headers = {
        'accept': "application/json",
        'content-type': "application/json"
        }

    response = requests.request("POST", url, data=json.dumps(payload), headers=headers, params=querystring)

    note_id = json.loads(response.content)['id']

    return note_id


def create_hubspot_deal(contact_dict, deal_dict, note_dict):
    try:
        # criando o contato no hubspot
        simple_public_object_input = SimplePublicObjectInput(
            properties=contact_dict
            # {"email": contact_submit_dict["email"], "firstname": contact_submit_dict["firstname"], "lastname": contact_submit_dict["lastname"], "phone": contact_submit_dict["phone"]}
        )
        create_client_response = api_client.crm.contacts.basic_api.create(
            simple_public_object_input=simple_public_object_input
        )

        client_id = create_client_response.to_dict()['id']

        # criando o deal no hubspot
        # aqui estou definindo dentro da fun칞칚o pra mandar o deal pra essa parte da pipeline
        deal_dict["dealstage"] = "appointmentscheduled"
        simple_public_object_input = SimplePublicObjectInput(
            properties=deal_dict
            # {"dealname": "teste", "bairro": "Centro", "rua": "Apartamento", "origem": "Indica칞칚o", "tipo_de_imovel": "Residencial", "hubspot_owner_id": "53280320", "dealname": "teste", "dealstage": "appointmentscheduled"}
        )
        create_deal_response = api_client.crm.deals.basic_api.create(
            simple_public_object_input=simple_public_object_input
        )

        deal_id = create_deal_response.to_dict()["id"]

        # associar o deal ao id do contato
        associate_contact_deal_response = api_client.crm.deals.associations_api.create(deal_id=deal_id, to_object_type="Contacts", to_object_id=client_id, association_type="deal_to_contact")

        # criando a note no hubspot
        note_id = create_hubspot_note(message=note_dict["note"])

        # associando a note ao deal
        associationType = "214"
        url = f"https://api.hubapi.com/crm/v3/objects/notes/{note_id}/associations/Deals/{deal_id}/{associationType}"
        querystring = {"hapikey":f"{st.secrets['api_key']}"}
        headers = {'accept': 'application/json'}

        response = requests.request("PUT", url, headers=headers, params=querystring)

    except ContactException as e:
        print("Exception when creating contact: %s\n" % e)
    except DealException as e:
        print("Exception when creating deal: %s\n" % e)

    return None   


if check_password("application_password"):
    df_usuarios_ativos_vista = get_df_usuarios()
    api_client = HubSpot(api_key=st.secrets["api_key"])
    deal_submit_dict = {}
    contact_submit_dict = {}
    note_submit_dict = {}

    hubspot_properties = [
        {'property_name': 'rua', 'object_type': 'Deals'},
        {'property_name': 'bairro', 'object_type': 'Deals'},
        {'property_name': 'tipo_de_imovel', 'object_type': 'Deals'},
        {'property_name': 'origem', 'object_type': 'Deals'},
        {'property_name': 'status', 'object_type': 'Deals'},
        {'property_name': 'data_de_contato_para_confirmacao_de_informacoes', 'object_type': 'Deals'},
    ]    

    # ------------- Formul치rio ------------------------
    st.subheader("Formul치rio de Indica칞칚o de Agenciamentos")
    with st.form("my_form"):
        deal_submit_dict["dealname"] = st.text_input(label='Endere칞o do Im칩vel', help='Informe apenas a Rua, o n췈 do im칩vel e se existir, o complemento.')
        col_1, col_2 = st.columns(2)
        with col_1:
            contact_submit_dict["firstname"] = st.text_input(label='Nome do Propriet치rio', help='Informe o nome completo do propriet치rio do im칩vel.')
            contact_submit_dict["email"] = st.text_input(label='E-mail do Propriet치rio', help='Informe o e-mail do propriet치rio do im칩vel.')
            contact_submit_dict["phone"] = st.text_input(label='Telefone do Propriet치rio', help='Informe o telefone do propriet치rio do im칩vel.')
            deal_submit_dict["nome_do_indicador"] = st.selectbox(options=df_usuarios_ativos_vista['Nomecompleto'].tolist(), label='Indicador')
            data_de_conversa = st.date_input(label='Data de Conversa com o Propriet치rio', help='Informe a data da conversa com o propri칠tario.')
            mensagem = st.text_area(label='Mensagem', help='Descreva brevemente o que foi conversado com o propriet치rio.', height=142)

        with col_2:
            contact_submit_dict["lastname"] = st.text_input(label='Sobrenome do Propriet치rio', help='Informe o sobrenome do propriet치rio do im칩vel.')
            for property in hubspot_properties:
                property_characteristics = return_labels_hubspot_property(property['object_type'], property['property_name'])
                # aqui eu ainda n칚o defini o nome da vari치vel pra adicionar no hub, mas tem que definir
                deal_submit_dict[property.get('property_name')] = st.selectbox(options=property_characteristics.get("options"), label=property_characteristics.get("label"))
        
        # Every form must have a submit button.
        st.info("**Por favor, confira todos os valores antes de enviar o formul치rio.**")
        submitted = st.form_submit_button("Enviar")
        if submitted:
            # checando se existe algum campo requirido em campo.
            required_fields = [deal_submit_dict["dealname"], contact_submit_dict["firstname"], contact_submit_dict["lastname"], contact_submit_dict["phone"], mensagem]
            if any([True for field in required_fields if field == '']):
                st.error('Por favor, preencha todos os campos corretamente.')
                st.stop()
            # criando a mensagem para ser enviada no deal do hubspot
            note_submit_dict["note"] = f'Im칩vel indicado pelo corretor {deal_submit_dict["nome_do_indicador"]}. O corretor indicou que o conversou com o propriet치rio do im칩vel no dia {data_de_conversa}. O im칩vel est치 identificado como {deal_submit_dict["rua"]}, {deal_submit_dict["dealname"]} no bairro {deal_submit_dict["bairro"]} e estaria dispon칤vel para {deal_submit_dict["status"]}. O propriet치rio do im칩vel 칠 {contact_submit_dict["firstname"]} {contact_submit_dict["lastname"]} e o e-mail dele 칠 {contact_submit_dict["email"] if contact_submit_dict["email"] != "" else "inexistente"}. O im칩vel foi captado atrav칠s de {deal_submit_dict["origem"]}, o contato do propriet치rio foi obtido atrav칠s de {deal_submit_dict["data_de_contato_para_confirmacao_de_informacoes"]}. O telefone dele 칠 {contact_submit_dict["phone"] if contact_submit_dict["phone"] != "" else "inexistente"}. O que ficou conversado entre o corretor e o propriet치rio foi: {mensagem}.'
            # colocar um spinner aqui checando se foi tudo bonitinho pro hubspot, se foi, exibe a mensagem, se n칚o, pede pra cadastrar de novo
            st.spinner('Registrando o formul치rio...')
            try:
                create_hubspot_deal(contact_dict=contact_submit_dict, deal_dict=deal_submit_dict, note_dict=note_submit_dict)
                st.success("Formul치rio enviado com sucesso!")
            except:
                st.write("Houve um erro no envio do formul치rio. Por favor, tente novamente. Caso o erro persista, entre em contato com o administrador.")
            


        
    

